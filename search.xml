<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构与算法——八大排序算法</title>
    <url>/2021/01/02/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="插入排序">插入排序</h2>
<h4 id="直接插入排序">1.直接插入排序</h4>
<p>直接插入排序是一种最简单直观的排序算法，<strong>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入</strong>。</p>
<p>1）将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p>
<p>2）从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面）。</p>
<p><img src='https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi9pY092VGVmd2taWmliWFlaRmtscWNuSkNGcHNINXE0TE04cUx4OWRmaWI1SldZaFFwYzdNcmlhSkxZZnk1NnY2bXRVNjRTaWMxZU9Cc3o0dVROYmF4U2tEemVRLzY0MD93eF9mbXQ9Z2lmJnRwPXdlYnAmd3hmcm9tPTUmd3hfbGF6eT0x?x-oss-process=image/format,png' height=200></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(li)):</span><br><span class="line">        x = li[i]</span><br><span class="line">        j = i</span><br><span class="line">        <span class="keyword">while</span> j&gt;<span class="number">0</span> <span class="keyword">and</span> li[j-<span class="number">1</span>]&gt;x:</span><br><span class="line">            li[j] = li[j-<span class="number">1</span>]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        li[j] = x</span><br></pre></td></tr></table></figure>
<h4 id="希尔排序">2.希尔排序</h4>
<p>希尔排序是插入排序的一种又称"缩小增量排序"，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。</p>
<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    step = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> step &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> cur <span class="keyword">in</span> <span class="built_in">range</span>(step, n):</span><br><span class="line">            i = cur</span><br><span class="line">            <span class="keyword">while</span> i &gt;= step <span class="keyword">and</span> li[i-step] &gt; li[i]:</span><br><span class="line">                li[i - step], li[i] = li[i], li[i-step]</span><br><span class="line">                i -= step</span><br><span class="line">        step = step // <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="选择排序">选择排序</h2>
<h4 id="简单选择排序">1.简单选择排序</h4>
<p>简单直接排序将一个序列分为两部分，前面是有序序列，后面是无序序列，<strong>不断的将后面的无序序列中的最小值添加到前面的有序序列中</strong>，直到后面的无序序列中没有值，开始的时候将第一个值作为有序序列。</p>
<p>1）首先在未排序序列中找到最小元素，存放到排序序列的起始位置 。</p>
<p>2）再从剩余未排序元素中继续寻找最小元素，然后放到已排序序列的末尾。</p>
<p>3）重复第二步，直到所有元素均排序完毕。</p>
<p><img src='https://img-blog.csdnimg.cn/20200718210604738.gif' height=200></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">		<span class="built_in">min</span> = i</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(li)):</span><br><span class="line">			<span class="keyword">if</span> li[j] &lt; li[<span class="built_in">min</span>]:</span><br><span class="line">				<span class="built_in">min</span> = j</span><br><span class="line">		<span class="keyword">if</span> i != <span class="built_in">min</span>:</span><br><span class="line">			li[i],li[<span class="built_in">min</span>] = li[<span class="built_in">min</span>],li[i]</span><br></pre></td></tr></table></figure>
<h4 id="堆排序">2.堆排序</h4>
<p>堆是一棵完全二叉树，当父节点的值小于左右节点时称为小根堆，反之称为大根堆。</p>
<p>1）首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端。</p>
<p>2）将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为n-1。</p>
<p>3）将剩余的n-1个数再构造成大根堆，再将顶端数与n-1位置的数交换，如此反复执行，便能得到有序数组。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆排序 堆：完全二叉树，大顶堆：每一个节点的值都大于其子节点</span></span><br><span class="line"><span class="comment">//arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> <span class="comment">//将父节点与子节点做一次交换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> l = i * <span class="number">2</span> + <span class="number">1</span>, r = i * <span class="number">2</span> + <span class="number">2</span>, max = i;</span><br><span class="line">	<span class="keyword">if</span>(l &lt; n &amp;&amp; a[l] &gt; a[max]) max = l;</span><br><span class="line">	<span class="keyword">if</span>(r &lt; n &amp;&amp; a[r] &gt; a[max]) max = r;</span><br><span class="line">	<span class="keyword">if</span>(max != i) <span class="comment">//父节点如果被调整、那么它和它的子节点的关系可能混乱需要重新调整</span></span><br><span class="line">	&#123;</span><br><span class="line">		swap(a[max], a[i]);</span><br><span class="line">		heapify(max, n);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = (n - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) heapify(i, n);</span><br><span class="line">    <span class="comment">//从第一个非叶节点开始调整、构造了一个大顶堆、根节点一定是最大的</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		swap(a[<span class="number">0</span>], a[i]);</span><br><span class="line">		heapify(<span class="number">0</span>, i);<span class="comment">//此时只是破坏了根节点的大小关系、所以只对他做一次交换就可</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="交换排序">交换排序</h2>
<h4 id="冒泡排序">1.冒泡排序</h4>
<p>让数组当中相邻的两个数进行比较，数组当中比较小的数值向下沉，数值比较大的向上浮。外层循环控制循环次数，内层循环控制相邻的两个元素进行比较。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j],li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>],li[j]</span><br></pre></td></tr></table></figure>
<p>可以记录到最后发生交换的位置，说明自此之下就是完全有序的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    i = <span class="built_in">len</span>(li)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&gt;<span class="number">0</span>:</span><br><span class="line">        lastExchangeIndex = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">if</span> li[j]&gt;li[j+<span class="number">1</span>]:</span><br><span class="line">               li[j],li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>],li[j] </span><br><span class="line">               lastExchangeIndex = j</span><br><span class="line">        i = lastExchangeIndex</span><br></pre></td></tr></table></figure>
<h4 id="快速排序">2.快速排序</h4>
<p>快速排序使用分治法策略来把一个序列分为两个子序列。保证左子序列中的数全部大于右子序列中的数。</p>
<p>1）从数列中挑出一个元素，称为"枢轴"。</p>
<p>2）重新排序数列，所有元素比枢轴值小的摆放在枢轴前面，所有元素比枢轴值大的摆在枢轴的后面（相同的数可以到任一边）。在这个分区结束之后，该枢轴就处于数列的中间位置。这个称为分区操作。</p>
<p>3）递归地把小于枢轴值元素的子数列和大于枢轴值元素的子数列排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//枢轴在左侧</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">	swap(a[l], a[l + r &gt;&gt; <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">int</span> i = l, j = r, pivot = a[l];</span><br><span class="line">	<span class="keyword">while</span>(i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(i &lt; j &amp;&amp; a[j] &gt;= pivot) j--;</span><br><span class="line">		<span class="keyword">while</span>(i &lt; j &amp;&amp; a[i] &lt;= pivot) i++;</span><br><span class="line">		<span class="keyword">if</span>(i &lt; j) swap(a[i], a[j]); </span><br><span class="line">	&#125; </span><br><span class="line"><span class="comment">//最后停止的时候i=j且a[i]&lt;=pivot</span></span><br><span class="line">	swap(a[i], a[l]);</span><br><span class="line">	quick_sort(l, i - <span class="number">1</span>);</span><br><span class="line">	quick_sort(i + <span class="number">1</span>, r); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//枢轴在中间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, pivot = a[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">while</span>(i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span> i++; <span class="keyword">while</span>(a[i] &lt; pivot);</span><br><span class="line">		<span class="keyword">do</span> j--; <span class="keyword">while</span>(a[j] &gt; pivot);</span><br><span class="line">		<span class="keyword">if</span>(i &lt; j) swap(a[i], a[j]);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//停止是i=j且在pivot处</span></span><br><span class="line">	quick_sort2(l, j);</span><br><span class="line">	quick_sort2(j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序">归并排序</h2>
<p>归并排序是利用<strong>归并</strong>的思想实现的排序方法，该算法采用经典的<strong>分治</strong>（divide-and-conquer）策略（分治法将问题分成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案"修补"在一起)。</p>
<p>1）使用递归，深入每一个数，每两个数间做一次排序，成为一组。</p>
<p>2）每两组之间做一次排序，构成一个大组，组内是绝对有序的。重复以上过程，直至最后只剩下一组。</p>
<p>3）对组间做排序的过程可以使用临时数组，交替对两组做扫描。</p>
<p><img src='https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif' height=200></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//先使用递归 mid为划分左右两组的中值</span></span><br><span class="line">	merge_sort(l, mid);</span><br><span class="line">	merge_sort(mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="keyword">int</span> temp[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>, p = l;</span><br><span class="line">	<span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i] &lt;= a[j]) temp[p++] = a[i++];</span><br><span class="line">		<span class="keyword">else</span> temp[p++] = a[j++];</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//一边已经结束，把另一组全部填进去</span></span><br><span class="line">	<span class="keyword">while</span>(i &lt;= mid) temp[p++] = a[i++];</span><br><span class="line">	<span class="keyword">while</span>(j &lt;= r) temp[p++] = a[j++];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt;= r; k++) a[k] = temp[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法——动态规划</title>
    <url>/2021/01/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="动态规划">动态规划</h2>
<p><code>动态规划算法是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的。</code></p>
<p><strong>动态规划多用于求最值。</strong></p>
<p>求最值的基本思想就是穷举，但是穷举不代表计算到每一个细节，因为穷举过程中往往会遇到<strong>「重叠子问题」</strong>，可以使用<strong>备忘录</strong>或<em>dp</em>表记录已经求解过的问题在下次遇到时直接使用。 而且，动态规划问题一定会具备<strong>「最优子结构」</strong>，也就是通过子问题的最值可以推导出更大规模的最值。 <strong>「无后效性」</strong>是指阶段的状态一旦确定，则此后过程的演变不再受此前各种状态及决策的影响。 另外如何沿着正确的路线穷举也是一个问题，它依赖于<strong>「状态转移方程」</strong>。</p>
<h3 id="斐波拉契数列">斐波拉契数列</h3>
<h4 id="完全暴力递归">1.完全暴力递归</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">	<span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>每一个<code>n</code>节点下又包含两个子节点，显然二叉树节点总数为指数级别，时间复杂度为$ O(2^n) $ 显然导致效率低下的一个重要原因是很多数字在被重复计算，即存在<strong>「重叠子问题」</strong>。</p>
<h4 id="基于备忘录的递归">2.基于备忘录的递归</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    hashmap = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        it = hashmap.get(n,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> it:</span><br><span class="line">            <span class="built_in">next</span> = fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>)</span><br><span class="line">            hashmap[n] = <span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> it</span><br></pre></td></tr></table></figure>
<p>这种情况下从<code>n</code>到<code>1</code>每一个节点只需要计算一次，时间复杂度简化为$ O(n) $ 只不过这种方法叫仍是<strong>「自顶向下」</strong>的，而动态规划叫是<strong>「自底向上」</strong>的。这里的自顶向下是指，计算<code>fib(n)</code>就必须先计算<code>fib(n-1)</code> 和<code>fib(n-2)</code>。而自底向上是从<code>fib(1) fib(2)</code>计算直到<code>fib(n)</code>，所以动态规划一般都脱离了递归，而是由循环迭代完成计算。</p>
<h4 id="基于dp数组">3.基于<em>dp</em>数组</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">	dp = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">  	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">   		dp.append(dp[i-<span class="number">1</span>]+dp[i-<span class="number">2</span>])</span><br><span class="line">  	<span class="keyword">return</span> dp[n-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>当然在此例中不需要一整个数组来保存所有值，只需要两个变量记录当前值和前一个值，即<strong>「状态压缩」</strong>。对于一个二维<em>dp</em>表，如果计算<code>dp[i][j]</code>需要的都是相邻的状态，就可以使用<strong>「状态压缩」</strong>将二维数组转换为一维，相应的复杂度从<span class="math inline">\(O(n^2)\)</span>降为<span class="math inline">\(O(n)\)</span>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f1,f2 = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">            f1,f2 = f2,f1+f2</span><br><span class="line">        <span class="keyword">return</span> f2</span><br></pre></td></tr></table></figure>
<p>给出这个问题结构的数学表达形式，也就是<strong>「状态转移方程」</strong>：</p>
<p>​ <span class="math inline">\(f(n)=\left\{\begin{array}{l}1, n=1,2 \\ f(n-1)+f(n-2), n&gt;2\end{array}\right.\)</span></p>
<p>可以发现，无论是那种算法都是围绕这个方程式的不同表现形式。但是这个例子没有涉及到<strong>「最优子结构」</strong>，因为这个例子只是单纯的求值，并没有涉及到选择的问题。</p>
<h3 id="凑零钱问题">凑零钱问题</h3>
<p>问题描述：<code>k</code> 种面值的硬币，面值分别为 <code>c1, c2 ... ck</code>，每种硬币的数量无限，总金额 <code>amount</code>，问<strong>最少</strong>需要几枚硬币凑出这个金额，如果不可能凑出，算法返回 -1 ： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coinChange</span>(<span class="params">coins: List[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>)</span></span><br></pre></td></tr></table></figure> 首先，这个问题是动态规划问题，因为它具有「最优子结构」的。<strong>要符合「最优子结构」，子问题间必须互相独立</strong>。</p>
<h4 id="暴力递归">1.暴力递归</h4>
<p>依据以下步骤来解决这个问题：</p>
<h5 id="确定base-case">1.确定<em>base case</em></h5>
<p>当目标金额<code>amount</code>为0时返回0，算法结束。</p>
<h5 id="确定状态即原问题和子问题中的变量">2.确定「状态」，即原问题和子问题中的变量</h5>
<p>也就是金额<code>amount</code>，它会向<em>base case</em>不断靠近。</p>
<h5 id="确定选择也就是导致状态产生变化的行为">3.确定「选择」，也就是导致「状态」产生变化的行为</h5>
<p>这里的选择即硬币的面值，一旦选定，它就会使<code>amount</code>减少</p>
<h5 id="明确dp函数数组的定义">4.<strong>明确<code>dp</code>函数/数组的定义</strong></h5>
<p>这里若使用自顶向下的解法，会有一个递归的 <em>dp</em> 函数，目标就是返回当前<code>amount</code>下最少的硬币数量。</p>
<h5 id="给出状态转移方程">5.给出状态转移方程</h5>
<p>​ <span class="math inline">\(dp(amount)=\left\{\begin{array}{l}-1, \text {amount}&lt;0 \\ 0, \text {amount}=0 \\ \min \{d p(\text {amount}-\operatorname{coin})+1 \mid \operatorname{coin} \in \operatorname{coins}\}, \text {amount}&gt;0\end{array}\right.\)</span></p>
<p>对这个状态方程做一点解释：在每一轮中，我们有<code>k</code>种选择，每一种选择对应一个剩余金额<code>amounnt-coin</code>，要想让总数量最少，只需要让<code>amounnt-coin</code>下的数量最少，最少数量=上一次最少数量+1即可。让<code>amounnt-coin</code>下的数量最少，再次调用此函数即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dp</span>(<span class="params">amount</span>):</span></span><br><span class="line">    <span class="keyword">if</span> amount == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> amount == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    res = <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">        remaining = amount-coin</span><br><span class="line">        <span class="keyword">if</span> remaining == -<span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>: res = <span class="built_in">min</span>(res,<span class="number">1</span>+remaining)</span><br><span class="line">    <span class="keyword">return</span> res <span class="keyword">if</span> res != <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="基于备忘录的递归-1">2.基于备忘录的递归</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dp</span>(<span class="params">amount</span>):</span></span><br><span class="line">    hashmap = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> amount <span class="keyword">in</span> hashmap: <span class="keyword">return</span> hashmap[amount]</span><br><span class="line">    <span class="keyword">if</span> amount == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> amount == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    res = <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">        remaining = amount-coin</span><br><span class="line">        <span class="keyword">if</span> remaining == -<span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>: res = <span class="built_in">min</span>(res,<span class="number">1</span>+remaining)</span><br><span class="line">    hashmap[amount] = res <span class="keyword">if</span> res != <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> hashmap[amount]</span><br></pre></td></tr></table></figure>
<h4 id="基于dp数组-1">3.基于<em>dp</em>数组</h4>
<p>当然，我们也可以自底向上使用 <em>dp</em>数组来消除重叠子问题。<code>dp</code>数组的作用是存储从0到<code>amount</code>时各需要硬币的最少数，对于一个具体的<code>amount</code>来说，有<code>k</code>种选择，每一种选择对应一个剩余金额<code>amounnt-coin</code>，直接在列表中找到<code>amounnt-coin</code>对应的最少数量，此时最少数量=上一次最少数量+1即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">amount</span>):</span></span><br><span class="line">    dp = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(amount+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dp:</span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            <span class="keyword">if</span> (i-coin)&lt;<span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i],dp[i-coin]+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> (dp[amount]==amount) <span class="keyword">else</span> dp[amount]</span><br></pre></td></tr></table></figure>
<p>可以看到，动态规划的代码框架为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化 base case</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = base</span><br><span class="line"><span class="comment">// 进行状态转移</span></span><br><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值(选择<span class="number">1</span>，选择<span class="number">2.</span>..)</span><br></pre></td></tr></table></figure>
<p>另外初始化和边界情况同样重要。</p>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>自然常数e是怎么来的？</title>
    <url>/2021/01/04/%E8%87%AA%E7%84%B6%E5%B8%B8%E6%95%B0e/</url>
    <content><![CDATA[<p align="center">
<a href="https://www.bilibili.com/video/BV1wV411t76D" target="_blank"><img src="https://img.shields.io/badge/bilibili-〔manim动画〕自然常数e是怎么来的？-000000.svg?style=flat-square&logo=Bilibili"></a>
</p>
<p><span class="math inline">\(e\)</span> 有时被称为自然常数（Natural constant），是一个约等于 2.71828182845904523536……的无理数。</p>
<p>这样一个看起来好像毫无规律的数为什么会被冠以「自然」之称呢？它又是如何被发现的呢？</p>
<h3 id="pi与e">1.<span class="math inline">\(\pi\)</span>与<span class="math inline">\(e\)</span></h3>
<p>说起<span class="math inline">\(e\)</span>，我们会很自然的想起另一个无理数<span class="math inline">\(\pi\)</span>,e 和圆周率<span class="math inline">\(\pi\)</span>都是超越数,</p>
<p><span class="math inline">\(\pi\)</span>的几何含义是圆的周长与直径之比，可以通过 <strong>正多边形逼近</strong>。</p>
<p>设多边形中心到一边端点的长度为1/2，边数为n，</p>
<p>则<span class="math inline">\(\pi = \lim _{n \rightarrow +\infty}\sin(\frac{360^\circ}{2n})*n\)</span></p>
<p>那么<span class="math inline">\(e\)</span>是否也有如此直观的表示方法呢？</p>
<h3 id="复利中的来源">2.复利中的来源</h3>
<p>首先表示自然底数的符号<span class="math inline">\(e\)</span>来源于瑞士数学和物理学家<strong>欧拉</strong>(Euler)的首字母。</p>
<p>但实际上，第一个发现这个常数的，并非欧拉本人，而是<strong>雅可比·伯努利</strong>（Jacob Bernoulli）。</p>
<p>他通过观察<strong>复利</strong>现象得到了<span class="math inline">\(e\)</span></p>
<p><code>复利：即利息也可以作为本金继续获得利息</code></p>
<p>假设银行利率为<span class="math inline">\(100\%\)</span>，结算周期为1年，那么1年后就可以拿到本金的2倍，即<span class="math inline">\((1+1)^1\)</span>，</p>
<p>如果年利率为<span class="math inline">\(50\%\)</span>，结算周期为半年，1年后可以拿到多少本金呢？这好像没什么不同，但是请记住，你半年前获得的利息，也可以拿来计算利息了，如此1年后就应该是本金的<span class="math inline">\((1+\frac{1}{2})^2\)</span>，</p>
<p>所以当总年利率为<span class="math inline">\(100\%\)</span>时，计算周期为<span class="math inline">\(\frac{1}{n}\)</span>年，1年后可以得到 <span class="math inline">\((1+\frac{1}{n} )^n\)</span>倍，当<span class="math inline">\(n\)</span>不断扩大，这个值趋向于一个特定的数，我们称之为自然常数，即 <span class="math inline">\(\lim_{n \to \infty} (1+\frac{1}{n} )^n=e\)</span></p>
<h3 id="微积分中的来源">3.微积分中的来源</h3>
<p>虽然我们了解了计算<span class="math inline">\(e\)</span>的式子，可是这个式子或者说这个数为什么会那么特殊呢，</p>
<p><span class="math inline">\(e\)</span>其实在微积分中也有相应的来源。</p>
<p>给出<span class="math inline">\(f(x)=a^x\)</span></p>
<p>我们知道这个函数在<span class="math inline">\((-\infty,+\infty)\)</span>上是连续的，接下来我们尝试求导，按定义于是有：</p>
<p><span class="math inline">\(\frac{d}{d x} a^{x}=\lim _{\Delta x \rightarrow 0} \frac{a^{x+\Delta x}-a^{x}}{\Delta x}=a^{x} \lim _{\Delta x \rightarrow 0} \frac{a^{\Delta x}-1}{\Delta x}=a^x\cdot M(a)\)</span></p>
<p>但是我们并不知道<span class="math inline">\(M(a)\)</span>这个式子如何求解，假设有一个数<span class="math inline">\(e\)</span>，使得<span class="math inline">\(M(e)\)</span>为1，那么<span class="math inline">\(\frac{d}{d x} e^{x}=e^x\)</span>，我们也就可以可以依靠<span class="math inline">\(e\)</span>来求解<span class="math inline">\(a\)</span>了。</p>
<p>设<span class="math inline">\(e^c=a\)</span>,那么<span class="math inline">\((a^x)&#39;=(e^{cx})&#39;=c(e^{cx})&#39;=c\cdot e^{cx}=c\cdot a^x\)</span></p>
<p>我们将<span class="math inline">\(c\)</span>表示为<span class="math inline">\(c=\log_e a\)</span>,就可以得到<span class="math inline">\((a^x)&#39;=\log_e a\cdot a^x=\ln a\cdot a^x\)</span></p>
<p>这也是对数的来源。</p>
<p>设<span class="math inline">\(f(n)=(1+\frac{1}{n})^n\)</span></p>
<p>两边取<span class="math inline">\(\ln f(n)=\ln[(1+\frac{1}{n})^n]=n\cdot \ln(1+\frac{1}{n})\)</span></p>
<p>将<span class="math inline">\(\frac{1}{n}\)</span>记作<span class="math inline">\(\Delta x\)</span>，</p>
<p><span class="math inline">\(\lim_{n \rightarrow +\infty}\ln f(n)=\lim _{\Delta x \rightarrow 0} \ln f(n)=\lim _{\Delta x \rightarrow 0} n \ln \left(1+\frac{1}{n}\right)=\lim _{\Delta x \rightarrow 0} \frac{\ln \left(1+\frac{1}{n}\right)}{\frac{1}{n}}\)</span></p>
<p>​ <span class="math inline">\(=\lim _{\Delta x \rightarrow 0} \frac{\ln (1+\Delta x)}{\Delta x}=\lim _{\Delta x \rightarrow 0} \frac{\ln (1+\Delta x)-\ln (1)}{\Delta x}=\ln ^{\prime}(1)=1\)</span></p>
<p><span class="math inline">\(\lim_{n \rightarrow +\infty} f(n)=\lim_{n \rightarrow +\infty} e^{\ln f(n)}=e^{\lim_{n \rightarrow +\infty}\ln f(n)}=e\)</span></p>
<p><span class="math inline">\(\lim_{n \to \infty} (1+\frac{1}{n} )^n=e\)</span></p>
<h3 id="总结">4.总结</h3>
<p>所以<strong>其实自然对数<span class="math inline">\(e\)</span>就是事物的增长极限。</strong>它通过<span class="math inline">\(\lim_{n \to \infty} (1+\frac{1}{n} )^n=e\)</span>反映出来。</p>
]]></content>
      <tags>
        <tag>高等数学</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法——绪论</title>
    <url>/2021/04/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h5 id="1-使用计算机求解问题"><a href="#1-使用计算机求解问题" class="headerlink" title="1    使用计算机求解问题"></a>1    使用计算机求解问题</h5><p>1.1    开发（设计、编写）一个程序，通常是为了解决一类<strong>问题</strong>，程序每次执行时能够解决该问题的一个<strong>实例</strong>。</p>
<p>1.2    程序的开发过程：</p>
<ul>
<li><p>需求分析（深入分析情况和细节，得到一个尽可能严格表述的问题表述）</p>
</li>
<li><p>数据组织和算法设计</p>
</li>
<li><p>编码</p>
</li>
<li><p>检查编译</p>
</li>
<li><p>调试测试（关键在于设计一套出色的测试用例）</p>
</li>
<li><p>维护</p>
</li>
</ul>
<h5 id="2-算法和算法设计"><a href="#2-算法和算法设计" class="headerlink" title="2    算法和算法设计"></a>2    算法和算法设计</h5><p>2.1    问题是需要解决的一类具体需求，而问题实例是所属问题的一个具体例子。算法则是解决问题的计算过程的严格描述，是一系列解决问题的清晰指令。程序则是算法的<strong>实现</strong>。</p>
<p>2.2    算法的性质：</p>
<ul>
<li><p>有穷性（算法描述应该由有限条指令或语句组成）</p>
</li>
<li><p>能行性（能够被设计成为具体的机械计算过程）</p>
</li>
<li><p>确定性（对于一个给定的初始数据，将产生一个唯一的确定的数据或输出结果）</p>
</li>
<li><p>终止性（算法产生的动作序列是有穷的）</p>
</li>
<li><p>输入输出（有明确的输入和输出）</p>
</li>
</ul>
<p>2.3    算法的描述：采用自然语言描述、采用严格的形式化计发描述、采用<strong>伪代码</strong>描述。</p>
<p>2.4    常见的算法设计模式：</p>
<ul>
<li>枚举法（利用计算机的速度优势）</li>
<li>贪心法（首先尽可能做出部分解，再逐步扩充得到完整解）</li>
<li>分治法（将复杂问题分解为相对简单的子问题，分而治之再组合）</li>
<li>回溯法（逐步探索所有可能的选择和步骤，一旦遇到无法前进则退回到前面的步骤，这一过程称为<strong>回溯</strong>）</li>
<li>动态规划法（在前面的步骤中收集信息，在后续步骤中动态选择最好的路径）</li>
<li>分支界限法（在不断搜索过程中将无用的选择不断删除）</li>
</ul>
<p>2.5    算法的设计要求：正确性、可读性、健壮性、高效率与低存储量</p>
<h5 id="3-算法代价和度量分析"><a href="#3-算法代价和度量分析" class="headerlink" title="3    算法代价和度量分析"></a>3    算法代价和度量分析</h5><p>3.1    在具体算法中，以其计数数值作为空间开销的基本度量，以其执行次数作为时间开销的基本度量。</p>
<p>3.2    代价分析分为事前分析（复杂度分析）和事后分析（测量执行时间和空间开销）。</p>
<p>3.3    复杂度分析的”大O记法”：对于单调的整数函数$f(n)$，如果存在一个整数函数$g(n)$和常数$c&gt;0$，使得对于充分大的n总有$f(n)&lt;=c \times g(n)$，就说函数$g(n)$是$f(n)$的一个渐近函数（忽略常量因子），记为$f(n)=O(g(n))$。</p>
<p>3.4    常用复杂度：常量复杂度：$O(1)$、$O(log n)$、$O(n)$、$O(n logn)$、$O(n^{2})$、$O(2^{n})$</p>
<p><img src='https://pic3.zhimg.com/v2-70fd95b38156cab69a006386a6164e96_r.jpg' height=200></p>
<h5 id="4-数据结构"><a href="#4-数据结构" class="headerlink" title="4    数据结构"></a>4    数据结构</h5><p>4.1    一个具体的数据结构可以表达为一个二元组 $D=(E,R)$,$D$是某个数据集合的一个有穷子集，而$R\in E \times E$ 表示元素之间的某种关系。数据结构就是研究数据的<strong>逻辑结构</strong>和<strong>物理结构</strong>以及它们之间<strong>相互关系</strong>。</p>
<p>4.2    逻辑结构，数据之间的相互关系：</p>
<ul>
<li>集合 结构中的数据元素除了同属于一种类型外，别无其它关系</li>
<li>线性结构 数据元素之间一对一的关系</li>
<li>树形结构 数据元素之间一对多的关系</li>
<li>图状结构或网状结构 结构中的数据元素之间存在多对多的关系</li>
</ul>
<p>4.3    物理结构（存储结构），数据在计算机中的表示：</p>
<ul>
<li>顺序结构</li>
<li>链式结构</li>
<li>索引结构</li>
<li>哈希结构</li>
</ul>
<p>4.3    数据的逻辑结构和物理结构是数据结构的两个密切相关的方面，同一逻辑结构可以对应不同的存储结构。算法的设计取决于数据的逻辑结构，而算法的实现依赖于指定的存储结构。</p>
]]></content>
      <tags>
        <tag>绪论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Numpy数据分析02——数组索引和切片</title>
    <url>/2021/04/04/python+numpy02/</url>
    <content><![CDATA[<h4 id="一维数据的索引和切片">一维数据的索引和切片：</h4>
<p>与python列表类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">&gt;&gt;&gt;a[<span class="number">2</span>]<span class="comment">#索引</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;a[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]<span class="comment">#切片</span></span><br><span class="line">array([<span class="number">2</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>
<h4 id="多维数组的索引和切片">多维数组的索引和切片：</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line">&gt;&gt;&gt;a[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment">#索引：从高维向低维约束</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line">&gt;&gt;&gt;a[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;a[:,<span class="number">1</span>,-<span class="number">3</span>]<span class="comment">#切片：与一维类似在每一个维度上切片</span></span><br><span class="line">array([<span class="number">5</span>,<span class="number">17</span>])</span><br><span class="line">&gt;&gt;&gt;a[:,:,::<span class="number">2</span>]</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">8</span>, <span class="number">10</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">14</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">18</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">22</span>]]])</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Numpy数据分析01——数组创建和变换</title>
    <url>/2021/04/04/python+numpy01/</url>
    <content><![CDATA[<p>NumPy是使用Python进行科学计算的基础软件包。</p>
<p>导入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<p>NumPy 提供了一个非常强大的N维数组对象 Ndarray。</p>
<p>ndarray数组包含两部分，实际的数据和描述数据的元数据(数据维度、数据类型等)，用轴表示保存数组的维度，秩表示轴的数量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = nd.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line">array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">      [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">&gt;&gt;&gt;print(a)<span class="comment">#ndarray对象输出成[],元素由空格分隔</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>],</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">&gt;&gt;&gt;print(<span class="built_in">type</span>(a))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">numpy</span>.<span class="title">ndarray</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="ndarray数组创建">ndarray数组创建：</h4>
<p>1.x = np.array(list/tuple[,dtype])</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4.1</span>]</span><br><span class="line">&gt;&gt;&gt;a = np.array(li,dtype=<span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;print(a)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>2.使用numpy函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = np.arange(<span class="number">5</span>);print(a) <span class="comment">#类似range()函数，产生从0到n-1的一位数组</span></span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt;a = np.ones((<span class="number">3</span>,<span class="number">2</span>),dtype=<span class="string">&#x27;int32&#x27;</span>);print(a) <span class="comment">#根据指定的(n,m)形状生成全1数组</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span>]]</span><br><span class="line">&gt;&gt;&gt;a = np.zeros((<span class="number">3</span>,<span class="number">2</span>));print(a) <span class="comment">#同上生成全0数组</span></span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line">&gt;&gt;&gt;a = np.full((<span class="number">2</span>,<span class="number">3</span>),<span class="number">2.1</span>);print(a)<span class="comment">#根据指定的(n,m)形状生成同值数组</span></span><br><span class="line">[[<span class="number">2.1</span> <span class="number">2.1</span> <span class="number">2.1</span>]</span><br><span class="line"> [<span class="number">2.1</span> <span class="number">2.1</span> <span class="number">2.1</span>]]</span><br><span class="line">&gt;&gt;&gt;a = np.eye(<span class="number">2</span>);print(a) <span class="comment">#生成n*n矩阵，对角线为1，其它全为0</span></span><br><span class="line">[[<span class="number">1.</span> <span class="number">0.</span>] </span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span>]]</span><br><span class="line">&gt;&gt;&gt;b = np.ones_like(a)</span><br><span class="line">&gt;&gt;&gt;b = np.zeros_like(a)</span><br><span class="line">&gt;&gt;&gt;b = np.full_like(a,val)<span class="comment">#上述函数演变而成，只是依据a的形状</span></span><br><span class="line">&gt;&gt;&gt;a = np.linspace(<span class="number">1</span>,<span class="number">10</span>,endpoint=<span class="literal">False</span>);print(a)<span class="comment">#根据起止等间距填充数据</span></span><br><span class="line">[<span class="number">1.</span>   <span class="number">3.25</span> <span class="number">5.5</span>  <span class="number">7.75</span>]</span><br><span class="line">&gt;&gt;&gt;c = np.concatenate((a,b))<span class="comment">#将多个数组合并成为一个新数组</span></span><br></pre></td></tr></table></figure>
<h4 id="ndarray对象属性">ndarray对象属性：</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">.shape</td>
<td>尺寸，即对于矩阵，n行m列</td>
</tr>
<tr class="even">
<td style="text-align: center;">.ndim</td>
<td>秩，即轴的数量或维度的数量</td>
</tr>
<tr class="odd">
<td style="text-align: center;">.size</td>
<td>元素的个数，相当于.shape中的n*m</td>
</tr>
<tr class="even">
<td style="text-align: center;">.dtype</td>
<td>元素的类型</td>
</tr>
<tr class="odd">
<td style="text-align: center;">.itemsize</td>
<td>每个元素的大小，以字节为单位</td>
</tr>
</tbody>
</table>
<h4 id="ndarray数组维度变换">ndarray数组维度变换：</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),dtype=np.int32)</span><br><span class="line">&gt;&gt;&gt;a.reshape((<span class="number">3</span>,<span class="number">8</span>))<span class="comment">#不改变原数组，返回一个shape形状的新数组</span></span><br><span class="line">array([[<span class="number">1</span> <span class="number">1</span> ... <span class="number">1</span> <span class="number">1</span>] </span><br><span class="line">       [<span class="number">1</span> <span class="number">1</span> ... <span class="number">1</span> <span class="number">1</span>] </span><br><span class="line">       [<span class="number">1</span> <span class="number">1</span> ... <span class="number">1</span> <span class="number">1</span>]])</span><br><span class="line">&gt;&gt;&gt;a.resize((<span class="number">3</span>,<span class="number">8</span>))<span class="comment">#同.reshape()但改变原数组</span></span><br><span class="line">&gt;&gt;&gt;a.fltten()<span class="comment">#原数组不变,返回降维后的一维数组</span></span><br><span class="line">array([<span class="number">1</span>,<span class="number">1.</span>.<span class="number">.1</span>,<span class="number">1</span>])</span><br><span class="line">&gt;&gt;&gt;a.swapaxes(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">#交换轴数量,不改变原数组(轴从0开始索引)</span></span><br><span class="line">array([[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]   </span><br><span class="line">        [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]   </span><br><span class="line">        [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]   </span><br><span class="line">        [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]  </span><br><span class="line"></span><br><span class="line">        [[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]   </span><br><span class="line">         [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]   </span><br><span class="line">         [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]   </span><br><span class="line">         [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]])</span><br></pre></td></tr></table></figure>
<h4 id="ndarray数组类型变换">ndarray数组类型变换：</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),dtype=np.<span class="built_in">int</span>)</span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line">array([[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],  </span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],  </span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], </span><br><span class="line"></span><br><span class="line">       [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],  </span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],  </span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]]])</span><br><span class="line">&gt;&gt;&gt;b = a.astype(np.<span class="built_in">float</span>)<span class="comment">#新生成一个数组改变原数组类型</span></span><br><span class="line">&gt;&gt;&gt;b</span><br><span class="line">array([[[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],  </span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],  </span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]], </span><br><span class="line"></span><br><span class="line">       [[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],  </span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],  </span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]]])</span><br><span class="line">&gt;&gt;&gt;ls = a.tolist()<span class="comment">#将ndarray数组转换为列表</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Numpy数据分析03——数组运算</title>
    <url>/2021/04/04/python+numpy03/</url>
    <content><![CDATA[<h4 id="ndarray数组与标量的运算">ndarray数组与标量的运算：</h4>
<p>作用于数组中的每一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">&gt;&gt;&gt;a += <span class="number">2</span><span class="comment">#标量(数据)</span></span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line">array([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br></pre></td></tr></table></figure>
<h4 id="ndarray数组运算一元函数">ndarray数组运算一元函数：</h4>
<p>对数据执行元素级运算的函数，返回新数组</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">函数</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">np.abs(a)/np.fabs(a)</td>
<td style="text-align: left;">计算数组各元素绝对值</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.sqrt(a)</td>
<td style="text-align: left;">计算数组各元素平方根</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.square(a)</td>
<td style="text-align: left;">计算数组各元素平方</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.log(a)/np.log10(a)</td>
<td style="text-align: left;">计算数组各元素自然对数/10底对数</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.rint(a)</td>
<td style="text-align: left;">计算数组各元素四舍五入值</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.modf(a)</td>
<td style="text-align: left;">将数组各元素小数和整数部分返回</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.exp(a)</td>
<td style="text-align: left;">计算数组各元素指数值</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.sign(a)</td>
<td style="text-align: left;">计算数组各元素符号值：-1，0，1</td>
</tr>
</tbody>
</table>
<h4 id="ndarray数组运算二元函数">ndarray数组运算二元函数：</h4>
<p>对数据执行元素级运算的函数，返回新数组</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">函数</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">+、-、*、/、**</td>
<td style="text-align: left;">两数组各元素进行对应运算</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.mod(a,b)</td>
<td style="text-align: left;">元素级模运算</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.copysign(a,b)</td>
<td style="text-align: left;">将数组b中各元素符号赋给数组a中对应元素</td>
</tr>
<tr class="even">
<td style="text-align: left;">&lt;、&gt;、&gt;=、&lt;=、==、!=</td>
<td style="text-align: left;">算数比较产bool值</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.maxinum(a,b)</td>
<td style="text-align: left;">元素级最大值最小值运算</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Numpy数据分析04——数据存取</title>
    <url>/2021/04/07/python+numpy04/</url>
    <content><![CDATA[<h4 id="一二维数据的存取："><a href="#一二维数据的存取：" class="headerlink" title="一二维数据的存取："></a>一二维数据的存取：</h4><p>CSV(逗号分隔值)，是一种常见的文件格式，用来存储批量一二维数据。</p>
<p>在numpy中，向csv文件写入数据和读出数据通过以下两个函数实现：</p>
<pre><code>np.savetxt(frame,array,fmt=&quot;%.18e&quot;,delimiter=None)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">100</span>).reshape(<span class="number">20</span>,<span class="number">5</span>)</span><br><span class="line">np.savetxt(<span class="string">&quot;a.csv&quot;</span>,a,fmt=<span class="string">&quot;%d&quot;</span>,delimiter=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>np.loadtxt(frame,dtype=np.float,delimiter=None,unpack=False)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b= np.loadtxt(<span class="string">&quot;a.csv&quot;</span>,dtype=np.<span class="built_in">int</span>,delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="多维数据的存取"><a href="#多维数据的存取" class="headerlink" title="多维数据的存取:"></a>多维数据的存取:</h4><p>在numpy中，写入和读出高维数据通过以下两个函数实现：</p>
<pre><code>a.tofile(fname,sep=&#39;&#39;,format=&#39;%s&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">100</span>).reshape(<span class="number">20</span>,<span class="number">5</span>)</span><br><span class="line">a.tofile(<span class="string">&quot;a.bat&quot;</span>,<span class="built_in">format</span>=<span class="string">&#x27;%d&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>np.fromfile(fname,dtype=np.float,count=-1,sep=&#39;&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = np.fromfile(<span class="string">&quot;a.bat&quot;</span>,dtype=np.<span class="built_in">int</span>,sep=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>但是通过此过程维度信息会丢失，仅会返回一维数据，故使用时需要备份维度信息即a.shape()</p>
<h4 id="NumPy便捷文件存取："><a href="#NumPy便捷文件存取：" class="headerlink" title="NumPy便捷文件存取："></a>NumPy便捷文件存取：</h4><p>可以保存维度信息，但扩展名为.npy</p>
<pre><code>np.save(frame,array)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = np.arange(<span class="number">100</span>).reshape((<span class="number">20</span>,<span class="number">5</span>))</span><br><span class="line">&gt;&gt;&gt;np.save(<span class="string">&quot;a.npy&quot;</span>,a)</span><br></pre></td></tr></table></figure>
<pre><code>np.load(fname)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;b = np.load(<span class="string">&quot;a.np&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语言概述</title>
    <url>/2021/04/26/SQL/</url>
    <content><![CDATA[<h3 id="数据定义">1.数据定义</h3>
<h6 id="模式的定义与删除">1.1模式的定义与删除</h6>
<p>模式即命名空间，在此模式下可继续定义基本表、视图、索引等，即数据库-&gt;模式-&gt;表、视图、索引等。</p>
<p>创建模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE SCHEAM [&lt;模式名&gt;] AUTHORIZATION &lt;用户名&gt;;</span><br></pre></td></tr></table></figure>
<p>模式名省略时默认为用户名。</p>
<p>此句可同时使用创建基本表、视图，授权定义子句。</p>
<p>即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE SCHEAM [&lt;模式名&gt;] AUTHORIZATION &lt;用户名&gt; [&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;]</span><br></pre></td></tr></table></figure>
<p>删除模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP SCHEAM &lt;模式名&gt; &lt;CASCADE|RESTRICT&gt;;</span><br></pre></td></tr></table></figure>
<p>CASCADE(级联)表示在删除模式时把所有数据库对象全部删除，RESTRICT(限制)表示在该模式下无对象时才能删除。</p>
<h6 id="基本表的定义删除与修改">1.2基本表的定义、删除与修改</h6>
<p>创建基本表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt; （&lt;列名&gt;&lt;数据类型&gt;[列级完整性约束]</span><br><span class="line">					[,&lt;列名&gt;&lt;数据类型&gt;[列级完整性约束]]</span><br><span class="line">					...</span><br><span class="line">					[,&lt;表级完整性约束&gt;]);</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_44915226/article/details/105724144">SQL server给完整性约束命名及删除完整性约束</a></p>
<p><strong>注意：在同一数据库中约束的名字是不允许重复的，即使是在不同的表中。若约束涉及多个属性列，则必须定义在表级上。</strong></p>
<p>修改基本表，包括添加列、添加表级完整性约束、删除列、删除完整性约束、修改列名和数据类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">[ADD [COLUMN] &lt;列名&gt; &lt;数据类型&gt; [列级完整性约束]]</span><br><span class="line">[ADD &lt;表级完整性约束&gt;]</span><br><span class="line">[DROP [COLUMN] &lt;列名&gt; [CASCADE|RESTRICT]]</span><br><span class="line">[DROP CONSTRAINT &lt;完整性约束名&gt; [CASCADE|RESTRICT]]</span><br><span class="line">[ALTER COLUMN &lt;列名&gt; &lt;数据类型&gt;];</span><br></pre></td></tr></table></figure>
<p>删除基本表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE &lt;表名&gt; [CASCADE|RESTRICT];</span><br></pre></td></tr></table></figure>
<p>在使用CASCADE时，引用此表的其他表也可能被删除。</p>
<h6 id="索引的定义修改与删除">1.3索引的定义、修改与删除</h6>
<p>在数据量较大的情况下查询操作比较耗时。建立索引为了加快查询速度。索引属于内模式，用户不必也不能显示指定索引。</p>
<p>建立索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt;</span><br><span class="line">ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;][,&lt;列名&gt;[&lt;次序&gt;]]...);</span><br></pre></td></tr></table></figure>
<p>次序可选ASC（升序）（默认）和DESC（降序）。</p>
<p>UNIQUE表示每一个索引值只对应唯一的数据记录。CLUSTER使用聚簇索引。</p>
<p>修改索引只支持修改索引名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER INDEX &lt;索引名&gt; RENAME TO &lt;新索引名&gt;;</span><br></pre></td></tr></table></figure>
<p>删除索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP INDEX &lt;索引名&gt;;</span><br></pre></td></tr></table></figure>
<h6 id="视图的定义与删除">1.4视图的定义与删除</h6>
<p>视图是从一个或几个基本表（或视图）导出的虚表。且数据库只存放视图的定义而不存放数据，数据仍然存放在基本表，基本表数据修改，视图查询数据随之改变。</p>
<p>建立视图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW &lt;视图名&gt; [(&lt;列名&gt;[,&lt;列名&gt;]...)]</span><br><span class="line">AS &lt;子查询&gt;</span><br><span class="line">[WITH CHECK OPTION];</span><br></pre></td></tr></table></figure>
<p>其中子查询可以是任意的SELECT语句。WITH CHECK OPTION表示对视图进行UPDATA、INSERT和DELECT操作时更新的行必须满足子查询的条件表达式。</p>
<p>组成视图的列名必须全部指定或全部省略。如果省略表示该视图由子查询的SELECT目标列组成。在（1）目标列不是纯列名而是聚集函数或表达式；（2）多表连接时选择了多个同名列名；（3）为某个列重命名 三种情况下必须指定全部列名。</p>
<p>创建语句并不执行SELECT语句，只将视图定义存入数据字典。</p>
<p>若一个视图从单个基本表导出，并且只是去掉了基本表的某些行和某些列，并且保留了主码，则称这类视图为<strong>行列子集视图</strong>。</p>
<p>带虚拟列的视图称为带表达式的视图。使用聚集函数和GROUP BY子句查询来定义的视图称为分组视图。</p>
<p>删除视图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP VIEW &lt;视图&gt;[CASCADE]</span><br></pre></td></tr></table></figure>
<p>为避免数据冗余，基本表中一般不存储各种派生出来的数据，而存储到视图中。修改基本表可能会破坏与视图之间的映像关系，故最好先删除再重建。</p>
<h3 id="数据查询">2.数据查询</h3>
<p>查询的一般格式为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[,目标列表达式&gt;...]</span><br><span class="line">FROM &lt;表名或视图名&gt;[,&lt;表名或视图名&gt;] | (SELECT语句) [AS] &lt;别名&gt;</span><br><span class="line">[WHERE &lt;条件表达式&gt;]</span><br><span class="line">[GROUP BY &lt;列名&gt; [HAVING &lt;条件表达式&gt;]]</span><br><span class="line">[ORDER BY &lt;列名&gt; [ASC|DESC]];</span><br></pre></td></tr></table></figure>
<p>基本逻辑是从FROM指定的表或视图中选择满足WHERE条件的元组，再按SELECT目标表达式选择属性。GROUP BY将按指定列进行分组，属性值相等的元组为一组，HAVING指定只有满足条件的组才给予输出。ORDER BY子句按指定列排序。</p>
<h4 id="单表查询">2.1单表查询</h4>
<p>仅涉及一个表的查询。</p>
<h6 id="选择表的若干列">2.1.1选择表的若干列</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;目标列表达式&gt;[,目标列表达式&gt;...]</span><br><span class="line">FROM &lt;表名&gt;</span><br></pre></td></tr></table></figure>
<p>可以使用*代表所有列。<目标列表达式>可以对属性列做运算，也可以使用<code>目标列表达式 表达式</code>的方式重命名。</p>
<h6 id="选择表的若干元组">2.1.2选择表的若干元组</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;目标列表达式&gt;[,目标列表达式&gt;...]</span><br><span class="line">FROM &lt;表名&gt;</span><br><span class="line">WHERE &lt;条件表达式&gt;</span><br></pre></td></tr></table></figure>
<p>可以使用DISTINCT消除重复行。</p>
<p>WHERE条件表达式可以使用比较运算符<code>&gt;、&lt;、=、!=、NOT+等等</code>、确定范围<code>BETWEEN AND、NOT BETWEEN AND</code>、确定取值<code>IN、NOT IN</code>、字符匹配<code>LIKE、NOT LIKE</code>、空值<code>IS NULL、IS NOT NULL</code>、多充条件<code>AND、NOT、OR</code>。</p>
<p>使用字符串匹配时若字符串中本身含有通配符_或%，则使用DSCAPE'<换码字符>'。</p>
<h6 id="排序">2.1.3排序</h6>
<p>ORDER BY子句，按一个或多个属性列升序（ASC）或降序（DESC）排序，默认是ASC。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[ORDER BY &lt;列名&gt;[,&lt;列名&gt;]  [ASC|DESC]];</span><br></pre></td></tr></table></figure>
<h6 id="聚集函数">2.1.4聚集函数</h6>
<p>聚集函数可以使用在SELECT目标列表达式 或 GROUP BY HAVING子句中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COUNT(*)                                                &#x2F;&#x2F; 元组个数</span><br><span class="line">COUNT( [DISTANCT|ALL] &lt;列名&gt;)          &#x2F;&#x2F; 属性列中值的个数</span><br><span class="line">SUM( [DISTANCT|ALL] &lt;列名&gt;)</span><br><span class="line">AVG( [DISTANCT|ALL] &lt;列名&gt;)</span><br><span class="line">MIN( [DISTANCT|ALL] &lt;列名&gt;)</span><br><span class="line">MAX( [DISTANCT|ALL] &lt;列名&gt;)</span><br></pre></td></tr></table></figure>
<p>除COUNT(*)外，其他函数都跳过空值。</p>
<h6 id="分组">2.1.5分组</h6>
<p>分组是为了细化聚集函数的作用对象。未分组时聚集函数将作用于每个结果，而分组后聚集函数只将作用于每一组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">GROUP BY &lt;列名&gt; [HAVING &lt;条件表达式&gt;]</span><br></pre></td></tr></table></figure>
<p>HAVING子句则是在查询结果中的每一组中进行条件判断。WHERE子句不能使用聚集函数做条件，有时需要HAVING。</p>
<h4 id="连接查询">2.2连接查询</h4>
<p>同时涉及两个以上的表的查询。即使用连接条件将多个表的查询结果连接起来。两表以上的连接称为多表连接。</p>
<h6 id="等值连接与非等值连接">2.2.1等值连接与非等值连接</h6>
<p>连接查询的连接条件放在WHERE子句中。WHERE子句可以同时完成连接和选择。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">WHERE [表名.]&lt;列名&gt; &lt;条件运算符&gt; 表名.]&lt;列名&gt;</span><br></pre></td></tr></table></figure>
<p>条件运算符可以是比较运算符或<code>BETWEEN AND</code>。</p>
<p>若列名在参加连接的各表中是不唯一的，则必须使用表名.<列名>的方式表示。</p>
<p><strong>FROM语句中必须写出所有参与连接查询的表。</strong></p>
<h6 id="自身连接">2.2.2自身连接</h6>
<p>在表自身进行连接操作，需要对每次连接操作的自身表进行命名。进行自身连接操作的基础是同一个表的两个属性列有一定逻辑关系。</p>
<h6 id="外连接">2.2.3外连接</h6>
<p>外连接是把连接过程中被舍弃的元组保留。</p>
<p>左外连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 目标列表达式&gt;[,目标列表达式&gt;...]</span><br><span class="line">FROM &lt;表名&gt;</span><br><span class="line">LEFT JOIN &lt;表名&gt;</span><br><span class="line">ON( 条件表达式&gt;)</span><br></pre></td></tr></table></figure>
<p>省略LEFT就是普通连接，FULL 是全连接（MySQL不支持全连接）。</p>
<h4 id="嵌套查询">2.3嵌套查询</h4>
<p>一个<code>SELECT FROM WHERE</code>语句称为一个查询块，将一个查询块嵌套在另一个查询块的<code>WHERE</code>或<code>HAVING</code>条件中的查询称为嵌套查询。</p>
<p>另外，<code>ORDER BY</code>子句只能对最终结果排序。</p>
<h6 id="带有in谓词的子查询">2.3.1带有IN谓词的子查询</h6>
<p>子查询的结果往往是一个集合，所以使用IN。</p>
<p>子查询的查询条件不依赖于父查询，称为<strong>不相关子查询</strong>。即先执行子查询，子查询的查询条件用于建立父查询的查询条件。反之称为相关子查询，这样的情况下往往要对重复使用的表重命名。</p>
<h6 id="带有比较运算符的子查询">2.3.2带有比较运算符的子查询</h6>
<p>当确切知道内层查询返回的是单个值时，可以使用比较运算符。</p>
<h6 id="带有any或all谓词的子查询">2.3.3带有ANY或ALL谓词的子查询</h6>
<p>内层查询返回的多个值时，使用ANY或ALL，同时搭配比较运算符。ANY表示任何一个，ALL表示所有。也可以通过聚集函数实现。</p>
<h6 id="带有exists谓词的子查询">2.3.4带有EXISTS谓词的子查询</h6>
<p>使用EXISTS的子查询只返回逻辑true或false。即若内层查询为非空，返回true，否则返回false。NOT EXISTS则相反。</p>
<p>使用EXISTS的子查询目标列表达式一般都用*。</p>
<p>一些带EXISTS或NOT EXISTS的子查询不能被其他形式查询替换，但所有带有IN谓词、比较运算符、ANY或ALL谓词的子查询都能被其替换。</p>
<p>SQL没有全称量词，但可以使用存在量词替换。例如全称可以转换为双重NOT EXISTS。</p>
<h4 id="集合查询">2.4集合查询</h4>
<p>SELECT查询结果是元组集合，多个SELECT查询的结果可以进行集合操作。参加集合操作的列数以及数据类型必须相同。</p>
<p>集合操作包括并UNION、交INTERSECT、差EXCEPT。</p>
<h4 id="派生表查询">2.5派生表查询</h4>
<p>子查询还可以出现在FROM子句中，即作为派生表作为主查询对象，此时必须指定别名，可以使用AS或省略。</p>
<h4 id="视图查询">2.6视图查询</h4>
<p>在视图定义完成后就可以像基本表一样进行查询。即<strong>视图消解</strong>。</p>
<p>有些非行列子集视图在查询中不一定能做正确转换，这类查询可以使用派生表查询。</p>
<h3 id="数据更新">3.数据更新</h3>
<h6 id="插入元组">3.1插入元组</h6>
<p>将新元组插入到指定表中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO &lt;表名&gt; [(&lt;列名&gt;[,&lt;列名&gt;...])] VALUES (&lt;常量&gt;[,&lt;常量&gt;...]);</span><br></pre></td></tr></table></figure>
<p><strong>在没有指定的属性列上，有默认值约束时填默认值，无默认值时填NULL值（在没有非空约束的情况下）。</strong></p>
<p>若没有指定任何属性列，则插入元组则在这些属性列上必须均有值且次序相同。</p>
<h6 id="插入子查询结果">3.2插入子查询结果</h6>
<p>SELETE子查询可以嵌套在INSERT语句中用以生成需要插入的批量数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO &lt;表名&gt; [(&lt;列名&gt;[,&lt;列名&gt;...])] 子查询;</span><br></pre></td></tr></table></figure>
<h6 id="修改数据">3.3修改数据</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE &lt;表名&gt;</span><br><span class="line">SET &lt;列名&gt;&#x3D;&lt;表达式&gt;[,&lt;列名&gt;&#x3D;&lt;表达式&gt;...]</span><br><span class="line">[WHERE &lt;条件&gt;]; </span><br></pre></td></tr></table></figure>
<p>修改满足WHERE子句的元组的属性值。如果省略WHERE子句则表示修改所有元组。</p>
<h6 id="嵌套子查询的修改">3.4嵌套子查询的修改</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE &lt;表名&gt;</span><br><span class="line">SET &lt;列名&gt;&#x3D;&lt;表达式&gt;[,&lt;列名&gt;&#x3D;&lt;表达式&gt;...]</span><br><span class="line">WHERE &lt;列名&gt; IN 子查询;</span><br></pre></td></tr></table></figure>
<h6 id="删除数据">3.5删除数据</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM &lt;表名&gt;</span><br><span class="line">[WHERE &lt;条件&gt;]; </span><br></pre></td></tr></table></figure>
<p>删除满足WHERE子句的元组。如果省略WHERE子句，则删除整表数据，这与删除表不同。</p>
<h6 id="嵌套子查询的修改-1">3.6嵌套子查询的修改</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM &lt;表名&gt;</span><br><span class="line">WHERE &lt;列名&gt; IN 子查询;</span><br></pre></td></tr></table></figure>
<p>对基本表中的数据增删改操作可能会破坏参照完整性。</p>
<h6 id="视图的更新">3.7视图的更新</h6>
<p>对视图的更新和对基本表的更新类似，最终也转换为对基本表的更新。也是通过视图消解完成的。</p>
<p>WITH CHECK OPTION语句指定了只能对视图进行子查询约定的条件。并不是所有的视图都是可更新的。</p>
]]></content>
      <tags>
        <tag>SQL</tag>
        <tag>数据库</tag>
        <tag>MySql</tag>
        <tag>SqlServer</tag>
      </tags>
  </entry>
  <entry>
    <title>Git与Github的基本使用</title>
    <url>/2021/04/29/Git%E4%B8%8EGithub/</url>
    <content><![CDATA[<p>Git是一款分布式版本控制系统。</p>
<h4 id="设置用户名和电子邮件地址">1.设置用户名和电子邮件地址</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name  &quot;Yourname&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>
<p>global为全局配置，不加global仅为为当前项目进行配置</p>
<p>查看用户名和电子邮件地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<h4 id="获取版本库仓库">2.获取版本库(仓库)</h4>
<p>创建本地仓库，该目录里的所有的文件都由Git进行管理和版本控制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>克隆远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone [url] ([directory])</span><br></pre></td></tr></table></figure>
<h4 id="文件的四种状态">3.文件的四种状态</h4>
<p>Untracked: 未跟踪，不参与版本控制</p>
<p>Staged: 暂存状态</p>
<p>Unmodified: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致</p>
<p>Modified: 文件已修改</p>
<p>查看文件状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status ([filename])    </span><br></pre></td></tr></table></figure>
<p><img  src='https://images2017.cnblogs.com/blog/63651/201709/63651-20170909091456335-1787774607.jpg' width="400" height="400"></p>
<h4 id="文件状态切换操作">4.文件状态切换操作</h4>
<p>将Untracked/Modified文件添加至暂存区(切换Staged)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add [filename] [filename2]      添加指定文件</span><br><span class="line">git add .                           添加当前目录所有文件</span><br><span class="line">git rm --cached [filename]          将文件返回为Untracked状态</span><br><span class="line">git reset HEAD [filename]			将文件返回为Modified状态</span><br></pre></td></tr></table></figure>
<p>将暂存区的文件(Staged)提交至本地仓库(Committed/Unmodified)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit (-m [message])            message为本次提交的说明</span><br><span class="line">git commit -a (-m [message]）		为Unmodified文件跳过git add为所有文件提交</span><br></pre></td></tr></table></figure>
<h4 id="查看提交历史">5.查看提交历史</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<p>--oneline 选项来查看历史记录的简洁的版本</p>
<h4 id="比较版本差异">6.比较版本差异</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff ([filename])                比较工作区与暂存区文件差异</span><br><span class="line">git diff --staged ([file])           比较暂存区和上一次提交的差异</span><br><span class="line">git diff [SHA-11] [SHA-12]           比较两次提交的差异</span><br><span class="line">git blame [filename]                 查看指定文件的修改记录</span><br><span class="line">git reset --soft HEAD^               撤销上一次提交</span><br></pre></td></tr></table></figure>
<h4 id="版本回退">7.版本回退</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset [SHA-1]                   回退到指定版本</span><br><span class="line">git reset HEAD^                      回退所有文件到上一个版本或者使用HEAD~1  </span><br><span class="line">git reset HEAD^ [filename]           回退特定文件的版本到上一个版本</span><br></pre></td></tr></table></figure>
<h4 id="文件管理">8.文件管理</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm [filename]                    将文件工作区中删除(如删除暂存区文件则使用-f参数)</span><br><span class="line">git mv [filename] [newfilename]      文件重命名</span><br></pre></td></tr></table></figure>
<h4 id="分支管理">9.分支管理</h4>
<p>创建分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch [branchname]              使用-d参数删除分支</span><br></pre></td></tr></table></figure>
<p>切换分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout [branchname]            使用-b参数同时创建并切换</span><br></pre></td></tr></table></figure>
<p>返回所有分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<p>将分支合并到当前分支上，合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。当手动修改冲突后，可以用 git add告诉 Git 文件冲突已经解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge [branchname]</span><br></pre></td></tr></table></figure>
<h4 id="标签">10.标签</h4>
<p>为暂存区的文件写标签并使用commit提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag                              查看已有标签</span><br><span class="line">git tag v1.0                         创建标签</span><br><span class="line">git tag -a v1.0 -m [message]         创建一个含附注的标签</span><br><span class="line">git tag -d v1.0                      删除标签</span><br></pre></td></tr></table></figure>
<h4 id="与github远程仓库连接">11.与Github(远程仓库)连接</h4>
<p>连接一个远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add [name] [url]          name一般使用origin</span><br></pre></td></tr></table></figure>
<p>查看当前配置的有哪些远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote                          使用-v参数看到每个别名的实际链接地址</span><br></pre></td></tr></table></figure>
<p>推送新分支至远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push [name] master              master可以是其他分支</span><br></pre></td></tr></table></figure>
<p>删除与远程仓库的连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm [name]</span><br></pre></td></tr></table></figure>
<p>从远程仓库下载新分支与数据，紧接着可以使用分支合并</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch origin master              从origin的远程上拉取名为master的分支到本地分支origin&#x2F;master中</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Numpy数据分析05—— NumPy随机数函数random子库</title>
    <url>/2021/04/29/python+numpy05/</url>
    <content><![CDATA[<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 64%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">函数</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">rand(d0...dn)</td>
<td style="text-align: left;">根据d0...dn形状创建随机数数组，浮点数，[0,1)均匀分布</td>
</tr>
<tr class="even">
<td style="text-align: left;">randn(d0...dn)</td>
<td style="text-align: left;">根据d0...dn形状创建随机数数组，标准正态分布</td>
</tr>
<tr class="odd">
<td style="text-align: left;">randint(low[,high,shape])</td>
<td style="text-align: left;">根据shape形状创建随机数数组，范围是[low,high)</td>
</tr>
<tr class="even">
<td style="text-align: left;">seed(s)</td>
<td style="text-align: left;">随机数种子</td>
</tr>
<tr class="odd">
<td style="text-align: left;">shuffle(a)</td>
<td style="text-align: left;">对数组a的第0轴进行随机元素排列，改变数组a</td>
</tr>
<tr class="even">
<td style="text-align: left;">permutation(a)</td>
<td style="text-align: left;">对数组a的第0轴进行随机元素排列，不改变数组a</td>
</tr>
<tr class="odd">
<td style="text-align: left;">choice(a[,shape,replace=Flase,p])</td>
<td style="text-align: left;">从一维数组a中以概率p随机抽取元素，形成shape形状新数组，replace表示是否可以重用元素</td>
</tr>
<tr class="even">
<td style="text-align: left;">uniform(low,high,shape)</td>
<td style="text-align: left;">产生在low与high之间均匀分布的shape形状的数组</td>
</tr>
<tr class="odd">
<td style="text-align: left;">normal(loc,scale,shape)</td>
<td style="text-align: left;">产生具有正态分布的shape形状的数组，loc为均值，scale为标准差</td>
</tr>
<tr class="even">
<td style="text-align: left;">poisson(lam,shape)</td>
<td style="text-align: left;">产生具有泊松分布的shape形状的数组，lam为随机事件发生概率</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
</search>
